@using Lesula.Admin.Extensions
@model Lesula.Client.Contracts.Models.Job
@{
    ViewBag.Title = "Create";
}
<h2>Edit Job</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Data</legend>
        <div class="editor-label">
            @Html.LabelFor(model => model.Id)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.Id)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.JobType)
        </div>
        <div>
            @Html.EnumDropDownListFor(model => model.JobType)
            @Html.ValidationMessageFor(model => model.JobType)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Code)
        </div>
        <div class="editor-field job">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Code)
            <div class="hlEditor" />
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Dependency)
        </div>
        <div>
            @Html.EditorFor(model => model.Dependency)
            @Html.ValidationMessageFor(model => model.Dependency)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.OutputDestination)
        </div>
        <div>
            @Html.EnumDropDownListFor(model => model.OutputDestination)
            @Html.ValidationMessageFor(model => model.OutputDestination)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.OutputFormat)
        </div>
        <div>
            @Html.EnumDropDownListFor(model => model.OutputFormat)
            @Html.ValidationMessageFor(model => model.OutputFormat)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Options)
        </div>
        <div>
            @Html.EditorFor(model => model.Options)
            @Html.ValidationMessageFor(model => model.Options)
        </div>
        <p>
            @Html.Hidden("mapperCode", (string)ViewBag.MapperCode)
            @Html.Hidden("reducerCode", (string)ViewBag.ReducerCode)
            @Html.ActionLink("Back","Index", null, new { @class = "back"})
            <button type="submit" class="save" onclick="updateHidden()">Save</button>
        </p>
    </fieldset>
}

<script type="text/javascript">
    $(".back").button({ icons: { primary: "us-back" } });
    $(".save").button({ icons: { primary: "us-save" } });
    $("#JobType").bind('change', jobTypeChange);
    
    var require = { paths: { ace: '@Url.Content("~/Scripts/ace/")' } };
    var hlText = [$("#Code").val()];
    var dType = ['csharp'];

    function jobTypeChange() {
        var jobType = $("#JobType").val();
        var code = editors[0].getSession().getValue();
        if (jobType == "Mapper") {
            editors[0].getSession().setValue($('#mapperCode').val());
            $('#reducerCode').val(code);
        }
        else {
            editors[0].getSession().setValue($('#reducerCode').val());
            $('#mapperCode').val(code);
        }

        updateHidden();
    }
    
    function updateHidden() {
        var code = editors[0].getSession().getValue();
        $("#Code").val(code);
    }
</script>
<script src="@Url.Content("~/Scripts/require.js")" data-main="@Url.Content("~/Scripts/syntax.js")" type="text/javascript"></script>
